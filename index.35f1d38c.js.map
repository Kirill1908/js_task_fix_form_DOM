{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAY,EAAG,SAAS,gBAAgB,CAAC,SACzC,EAAc,EAAG,CAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAC9C,EAAc,EAAG,CAAQ,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAEpD,EAAW,OAAO,CAAC,SAAC,CAApB,EACE,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAc,EAAK,IAAI,CAC1B,KAAK,CAAC,aACN,GAAG,CAAC,SAAC,CAFR,EAEiB,OAAA,EAAK,MAAM,CAAC,GAAG,WAAW,GAAK,EAAK,KAAK,CAAC,GAAG,WAAW,EACtE,GAAA,IAAI,CAAC,IAER,CAAA,EAAM,SAAS,CAAG,cAClB,EAAM,YAAY,CAAC,MAAO,EAAK,EAAE,EACjC,EAAK,YAAY,CAAC,cAAe,GACjC,EAAM,WAAW,CAAG,GAAe,MAAA,CAAZ,GACvB,EAAK,UAAU,CAAC,YAAY,CAAC,EAAO,EACtC,GAEA,EAAW,OAAO,CAAC,SAAC,CAApB,EACE,IAAM,EAAQ,SAAS,aAAa,CAAC,SAC/B,EACJ,EAAK,IAAI,CAAC,EAAE,CAAC,WAAW,GAAK,EAAK,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW,EAE7D,CAAA,EAAM,SAAS,CAAG,cAClB,EAAM,WAAW,CAAG,EAAK,IAAI,CAC7B,EAAM,YAAY,CAAC,MAAO,EAAK,EAAE,EACjC,EAAK,YAAY,CAAC,cAAe,GACjC,EAAK,UAAU,CAAC,YAAY,CAAC,EAAO,EACtC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar formsArr = _to_consumable_array(document.querySelectorAll(\"form\"));\nvar inputsArr1 = _to_consumable_array(formsArr[0].querySelectorAll(\"input\"));\nvar inputsArr2 = _to_consumable_array(formsArr[1].querySelectorAll(\"input\"));\ninputsArr1.forEach(function(item) {\n    var label = document.createElement(\"label\");\n    var correctName = item.name.split(/(?=[A-Z])/).map(function(word) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n    }).join(\" \");\n    label.className = \"field-label\";\n    label.setAttribute(\"for\", item.id);\n    item.setAttribute(\"placeholder\", correctName);\n    label.textContent = \"\".concat(correctName);\n    item.parentNode.insertBefore(label, item);\n});\ninputsArr2.forEach(function(item) {\n    var label = document.createElement(\"label\");\n    var correctPlaceholderName = item.name[0].toUpperCase() + item.name.slice(1).toLowerCase();\n    label.className = \"field-label\";\n    label.textContent = item.name;\n    label.setAttribute(\"for\", item.id);\n    item.setAttribute(\"placeholder\", correctPlaceholderName);\n    item.parentNode.insertBefore(label, item);\n});\n\n//# sourceMappingURL=index.35f1d38c.js.map\n","'use strict';\n\nconst formsArr = [...document.querySelectorAll('form')];\nconst inputsArr1 = [...formsArr[0].querySelectorAll('input')];\nconst inputsArr2 = [...formsArr[1].querySelectorAll('input')];\n\ninputsArr1.forEach((item) => {\n  const label = document.createElement('label');\n  const correctName = item.name\n    .split(/(?=[A-Z])/)\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\n  label.className = 'field-label';\n  label.setAttribute('for', item.id);\n  item.setAttribute('placeholder', correctName);\n  label.textContent = `${correctName}`;\n  item.parentNode.insertBefore(label, item);\n});\n\ninputsArr2.forEach((item) => {\n  const label = document.createElement('label');\n  const correctPlaceholderName =\n    item.name[0].toUpperCase() + item.name.slice(1).toLowerCase();\n\n  label.className = 'field-label';\n  label.textContent = item.name;\n  label.setAttribute('for', item.id);\n  item.setAttribute('placeholder', correctPlaceholderName);\n  item.parentNode.insertBefore(label, item);\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","formsArr","document","querySelectorAll","inputsArr1","inputsArr2","forEach","item","label","createElement","correctName","split","map","word","charAt","toUpperCase","toLowerCase","join","className","setAttribute","id","textContent","concat","parentNode","insertBefore","correctPlaceholderName"],"version":3,"file":"index.35f1d38c.js.map"}